// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package message_bus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MessageBusClient is the client API for MessageBus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageBusClient interface {
	GetRandomDataStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (MessageBus_GetRandomDataStreamClient, error)
}

type messageBusClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageBusClient(cc grpc.ClientConnInterface) MessageBusClient {
	return &messageBusClient{cc}
}

func (c *messageBusClient) GetRandomDataStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (MessageBus_GetRandomDataStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageBus_serviceDesc.Streams[0], "/Message_bus/GetRandomDataStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageBusGetRandomDataStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageBus_GetRandomDataStreamClient interface {
	Recv() (*Reply, error)
	grpc.ClientStream
}

type messageBusGetRandomDataStreamClient struct {
	grpc.ClientStream
}

func (x *messageBusGetRandomDataStreamClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageBusServer is the server API for MessageBus service.
// All implementations must embed UnimplementedMessageBusServer
// for forward compatibility
type MessageBusServer interface {
	GetRandomDataStream(*Request, MessageBus_GetRandomDataStreamServer) error
	mustEmbedUnimplementedMessageBusServer()
}

// UnimplementedMessageBusServer must be embedded to have forward compatible implementations.
type UnimplementedMessageBusServer struct {
}

func (*UnimplementedMessageBusServer) GetRandomDataStream(*Request, MessageBus_GetRandomDataStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRandomDataStream not implemented")
}
func (*UnimplementedMessageBusServer) mustEmbedUnimplementedMessageBusServer() {}

func RegisterMessageBusServer(s *grpc.Server, srv MessageBusServer) {
	s.RegisterService(&_MessageBus_serviceDesc, srv)
}

func _MessageBus_GetRandomDataStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageBusServer).GetRandomDataStream(m, &messageBusGetRandomDataStreamServer{stream})
}

type MessageBus_GetRandomDataStreamServer interface {
	Send(*Reply) error
	grpc.ServerStream
}

type messageBusGetRandomDataStreamServer struct {
	grpc.ServerStream
}

func (x *messageBusGetRandomDataStreamServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

var _MessageBus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Message_bus",
	HandlerType: (*MessageBusServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRandomDataStream",
			Handler:       _MessageBus_GetRandomDataStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "message_bus/message_bus.proto",
}
